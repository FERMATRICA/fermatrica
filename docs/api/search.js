window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "fermatrica", "modulename": "fermatrica", "kind": "module", "doc": "<p>FERMATRICA</p>\n\n<p>Core of the FERMATRICA econometrics framework: define model, build, run, evaluate and optimize</p>\n"}, {"fullname": "fermatrica.basics", "modulename": "fermatrica.basics", "kind": "module", "doc": "<p>Basic / non-specific objects and operations of the FERMATRICA framework core</p>\n"}, {"fullname": "fermatrica.basics.basics", "modulename": "fermatrica.basics.basics", "kind": "module", "doc": "<p>Basic / non-specific objects and operations of the FERMATRICA framework core</p>\n"}, {"fullname": "fermatrica.basics.basics.FermatricaError", "modulename": "fermatrica.basics.basics", "qualname": "FermatricaError", "kind": "class", "doc": "<p>Exception class for errors specific for Fermatrica</p>\n", "bases": "builtins.Exception"}, {"fullname": "fermatrica.basics.basics.fermatrica_error", "modulename": "fermatrica.basics.basics", "qualname": "fermatrica_error", "kind": "function", "doc": "<p>Raise FermatrricaError exception</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msg</strong>:  error message as string</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>void</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.basics.basics.params_to_dict", "modulename": "fermatrica.basics.basics", "qualname": "params_to_dict", "kind": "function", "doc": "<p>Converts DataFrame with transformation params to the dictionary\nwith elements accessible with dot notation</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>params</strong>:  paandas DataFrame with columns <code>arg</code> and <code>value</code> (at least)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>dictionary</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"n\">fermatrica_utils</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">DotDict</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation", "modulename": "fermatrica.evaluation", "kind": "module", "doc": "<p>Evaluation: let's test how good is our model: itself and in the algo optimising process</p>\n"}, {"fullname": "fermatrica.evaluation.metrics", "modulename": "fermatrica.evaluation.metrics", "kind": "module", "doc": "<p>Metrics to be used in model evaluations. Do not confuse with <code>scoring</code> containing functions\nto compose complex scoring from basic metrics defined here. Scoring is aimed more to facilitate algorithmic\noptimisation, metrics could be interpreted by experts and event clients themselves.</p>\n"}, {"fullname": "fermatrica.evaluation.metrics.r_squared", "modulename": "fermatrica.evaluation.metrics", "qualname": "r_squared", "kind": "function", "doc": "<p>Classic (non-adjusted) R^2:\nR^2 = MSE(obs, pred) / Var(obs)</p>\n\n<p>Independent of model type, just observed and predicted vectors are required.\nUnit-free metrics for regression tasks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  observed values (Y)</li>\n<li><strong>pred</strong>:  predicted values (Y-hat)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.metrics.rmse", "modulename": "fermatrica.evaluation.metrics", "qualname": "rmse", "kind": "function", "doc": "<p>Root mean squared error (RMSE) between observed <code>obs</code> and predicted <code>pred</code> vectors:\nRMSE = ( SUM((obs - pred)^2) / LEN(obs)) ^ .5</p>\n\n<p>Most used metrics for regression tasks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  observed values (Y)</li>\n<li><strong>pred</strong>:  predicted values (Y-hat)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.metrics.mse", "modulename": "fermatrica.evaluation.metrics", "qualname": "mse", "kind": "function", "doc": "<p>Mean squared error (MSE) between observed <code>obs</code> and predicted <code>pred</code> vectors:\nMSE = SUM((obs - pred)^2) / LEN(obs)</p>\n\n<p>More basic and a bit faster version of RMSE, but calculated in squared units and\nhence less interpretable and popular in the industry (but not in the scientific research)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  observed values (Y)</li>\n<li><strong>pred</strong>:  predicted values (Y-hat)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.metrics.mape", "modulename": "fermatrica.evaluation.metrics", "qualname": "mape", "kind": "function", "doc": "<p>Mean absolute percentage error (MAPE) between observed <code>obs</code> and predicted <code>pred</code> vectors:\nMAPE = SUM( ABS((obs - pred) / obs) ) / LEN(obs) * 100</p>\n\n<p>More robust metrics for regression tasks, also most intuitive for non-specialists.\nSome major issues of MAPE are 0-division if observed value is 0 and extreme sensitivity for\neven small absolute errors when observed values are much closer to 0 than the whole vector.</p>\n\n<p>To avoid it some popular workarounds / alternatives are implemented: <code>mapef</code>, <code>mape_adj</code>, <code>smape</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  observed values (Y)</li>\n<li><strong>pred</strong>:  predicted values (Y-hat)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.metrics.mapef", "modulename": "fermatrica.evaluation.metrics", "qualname": "mapef", "kind": "function", "doc": "<p>Fixed (\"f\") version of mean absolute percentage error (MAPE) between observed <code>obs</code> and predicted <code>pred</code> vectors:\nMAPE = SUM( ABS((obs - pred) / obs) ) / LEN(obs) * 100</p>\n\n<p>More robust metrics for regression tasks, also most intuitive for non-specialists.\nPoints with zero observations are removed in this implementation to avoid 0-division.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  observed values (Y)</li>\n<li><strong>pred</strong>:  predicted values (Y-hat)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.metrics.mape_adj", "modulename": "fermatrica.evaluation.metrics", "qualname": "mape_adj", "kind": "function", "doc": "<p>Adjusted (\"adj\") version of mean absolute percentage error (MAPE) between observed <code>obs</code> and predicted <code>pred</code> vectors:\nMAPE = SUM( ABS((obs - pred) / obs) ) / LEN(obs) * 100</p>\n\n<p>More robust metrics for regression tasks, also most intuitive for non-specialists.\nPoints with observations lesser than <code>adj_val</code> threshold are removed in this implementation to avoid 0-division\nand / or exclude points with hardly predictable small observed values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  observed values (Y)</li>\n<li><strong>pred</strong>:  predicted values (Y-hat)</li>\n<li><strong>adj_val</strong>:  threshold to exclude small values / bottom outliers</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">adj_val</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.metrics.smape", "modulename": "fermatrica.evaluation.metrics", "qualname": "smape", "kind": "function", "doc": "<p>Symmetric mean absolute percentage error (SMAPE) between observed <code>obs</code> and predicted <code>pred</code> vectors:\nSMAPE = SUM( ABS((obs - pred) / (ABS(obs) + ABS(pred))) ) / LEN(obs) * 100 * 2</p>\n\n<p>More robust metrics for regression tasks, also most intuitive for non-specialists.\nSymmetric version avoids 0-division by dividing on sum of absolute values of <code>obs</code> and <code>pred</code> instead of\njust <code>obs</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  observed values (Y)</li>\n<li><strong>pred</strong>:  predicted values (Y-hat)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.metrics.r_squared_group", "modulename": "fermatrica.evaluation.metrics", "qualname": "r_squared_group", "kind": "function", "doc": "<p>Calculate R^2 per group (e.g. per superbrand or per region)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  vector with observed values (Y)</li>\n<li><strong>pred</strong>:  vector with predicted values (Y-hat)</li>\n<li><strong>group</strong>:  vector with grouping values, e.g. 'superbrand'</li>\n<li><strong>reduce</strong>:  if dataset's entity differs from <code>group</code>, additional vector to group by before metrics calculation,\ne.g. 'date'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">reduce</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.metrics.rmse_group", "modulename": "fermatrica.evaluation.metrics", "qualname": "rmse_group", "kind": "function", "doc": "<p>Calculate RMSE per group (e.g. per superbrand or per region)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  vector with observed values (Y)</li>\n<li><strong>pred</strong>:  vector with predicted values (Y-hat)</li>\n<li><strong>group</strong>:  vector with grouping values, e.g. 'superbrand'</li>\n<li><strong>reduce</strong>:  if dataset's entity differs from <code>group</code>, additional vector to group by before metrics calculation,\ne.g. 'date'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">reduce</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.metrics.mapef_group", "modulename": "fermatrica.evaluation.metrics", "qualname": "mapef_group", "kind": "function", "doc": "<p>Calculate MAPE-f (with 0-observations removed) per group (e.g. per superbrand or per region)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  vector with observed values (Y)</li>\n<li><strong>pred</strong>:  vector with predicted values (Y-hat)</li>\n<li><strong>group</strong>:  vector with grouping values, e.g. 'superbrand'</li>\n<li><strong>reduce</strong>:  if dataset's entity differs from <code>group</code>, additional vector to group by before metrics calculation,\ne.g. 'date'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">group</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">reduce</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.metrics.vif_worker", "modulename": "fermatrica.evaluation.metrics", "qualname": "vif_worker", "kind": "function", "doc": "<p>Working function to calculate VIF. However, in some cases could be used directly, hence function is not protected</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>col</strong>:  column name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>VIF value</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">col</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.metrics.vif", "modulename": "fermatrica.evaluation.metrics", "qualname": "vif", "kind": "function", "doc": "<p>Calculate VIF with OLS or similar model. <code>statsmodels</code> library is assumed to be used as engine for <code>model_cur</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_cur</strong>:  <code>statsmodels</code> OLS model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>pandas series with VIFs as values and regressor names as series index</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_cur</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring", "modulename": "fermatrica.evaluation.scoring", "kind": "module", "doc": "<p>Complex scoring system is aimed more to facilitate algorithmic optimisation. Do not confuse with <code>metrics</code>.\nMetrics are more basic things used both as parts of the scoring and as independent indicators of model\nquality intuitive enough for humans</p>\n"}, {"fullname": "fermatrica.evaluation.scoring.scoring", "modulename": "fermatrica.evaluation.scoring", "qualname": "scoring", "kind": "function", "doc": "<p>Main function to create complex scoring from the set of individual scorings / metrics</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset containing Y (observed) variable</li>\n<li><strong>pred</strong>:  vector with predicted values</li>\n<li><strong>model</strong>:  FERMATRICA Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.bell_curve", "modulename": "fermatrica.evaluation.scoring", "qualname": "bell_curve", "kind": "function", "doc": "<p>Function to normalise raw individual scores / metrics to 0...1 range using bell curve</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>: </li>\n<li><strong>if_invert</strong>:  Should we invert parameter? I.e. RMSE - the smaller, the better, but combined score is maximising\n1 = yes\n0 = no</li>\n<li><strong>width</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">if_invert</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.r_squared", "modulename": "fermatrica.evaluation.scoring", "qualname": "r_squared", "kind": "function", "doc": "<p>Classic (non-adjusted) R^2:\nR^2 = MSE(obs, pred) / Var(obs)</p>\n\n<p>Independent of model type, just observed and predicted vectors are required.\nUnit-free metrics for regression tasks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  observed values (Y)</li>\n<li><strong>pred</strong>:  predicted values (Y-hat)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.rmse", "modulename": "fermatrica.evaluation.scoring", "qualname": "rmse", "kind": "function", "doc": "<p>Root mean squared error (RMSE) between observed <code>obs</code> and predicted <code>pred</code> vectors:\nRMSE = ( SUM((obs - pred)^2) / LEN(obs)) ^ .5</p>\n\n<p>Most used metrics for regression tasks.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  observed values (Y)</li>\n<li><strong>pred</strong>:  predicted values (Y-hat)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.rmse_bs_key", "modulename": "fermatrica.evaluation.scoring", "qualname": "rmse_bs_key", "kind": "function", "doc": "<p>Calculate RMSE per <code>bs_key</code> (mostly SKU or region)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  vector with observed values (Y)</li>\n<li><strong>pred</strong>:  vector with predicted values (Y-hat)</li>\n<li><strong>ds</strong>:  dataset containing <code>bs_key</code> column</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.r_squared_bs_key", "modulename": "fermatrica.evaluation.scoring", "qualname": "r_squared_bs_key", "kind": "function", "doc": "<p>Calculate R^2 per <code>bs_key</code> (mostly SKU or region)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs</strong>:  vector with observed values (Y)</li>\n<li><strong>pred</strong>:  vector with predicted values (Y-hat)</li>\n<li><strong>ds</strong>:  dataset containing <code>bs_key</code> column</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obs</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">pred</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">ExtensionArray</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.r_squared_adjusted", "modulename": "fermatrica.evaluation.scoring", "qualname": "r_squared_adjusted", "kind": "function", "doc": "<p>Adjusted R^2 (discounted according to number of the independent variables in linear model).\nAs for now supported only for OLS (ordinary least squares linear model).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  FERMATRICA Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.sign_simple", "modulename": "fermatrica.evaluation.scoring", "qualname": "sign_simple", "kind": "function", "doc": "<p>Check if all regression coefficient signs are correct (correspond to RHS definition in Model).\nWrong signs are penalised with 1 * sign_weight for every occurrence, result is weighted by the\nnumber of regressors.</p>\n\n<p>This function doesn't take into account how big \"error\" is, for more elaborate approach try\n<code>sign_t_value</code> and <code>sign_t_value_s</code>.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  FERMATRICA Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.sign_t_value", "modulename": "fermatrica.evaluation.scoring", "qualname": "sign_t_value", "kind": "function", "doc": "<p>Check if all regression coefficient signs are correct (correspond to RHS definition in Model).\nWrong signs are penalised with T-value * sign_weight for every occurrence, result is weighted by the\nnumber of regressors.</p>\n\n<p>T-value allows to measure how big the \"error\" is, so facilitates algorithmic optimisation greatly.\nT-value is preferred over p-value due to the already existing sign and range [-Inf, Inf] rather\nthan [0, Inf].</p>\n\n<p>For simpler approach see <code>sign_simple</code>, for even more sophisticated - <code>sign_t_value_s</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  FERMATRICA Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.sign_t_value_s", "modulename": "fermatrica.evaluation.scoring", "qualname": "sign_t_value_s", "kind": "function", "doc": "<p>Check if all regression coefficient signs are correct (correspond to RHS definition in Model) and\nestimations are significant. Wrong signs and not enough significance are penalised with\n(T-value - 2) * sign_weight for every occurrence, result is weighted by the number of regressors.</p>\n\n<p>T-value allows to measure how big the \"error\" is, so facilitates algorithmic optimisation greatly.\nT-value is preferred over p-value due to the already existing sign and range [-Inf, Inf] rather\nthan [0, Inf].</p>\n\n<p>For simpler approaches see <code>sign_simple</code> and <code>sign_t_value_s</code>, for more flexible - <code>sign_t_value_st</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  FERMATRICA Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.sign_t_value_st", "modulename": "fermatrica.evaluation.scoring", "qualname": "sign_t_value_st", "kind": "function", "doc": "<p>Check if all regression coefficient signs are correct (correspond to RHS definition in Model) and\nestimations are significant. Wrong signs and not enough significance are penalised with\n(T-value - threshold) * sign_weight for every occurrence, result is weighted by the number of regressors.</p>\n\n<p>T-value allows to measure how big the \"error\" is, so facilitates algorithmic optimisation greatly.\nT-value is preferred over p-value due to the already existing sign and range [-Inf, Inf] rather\nthan [0, Inf].</p>\n\n<p>Thresholds should be defined in Model.model_rhs DataFrame in <code>signif_threshold</code> column.</p>\n\n<p>For less flexible approach (threshold is allways equal to 2) see <code>sign_t_value_s</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  FERMATRICA Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.t_value", "modulename": "fermatrica.evaluation.scoring", "qualname": "t_value", "kind": "function", "doc": "<p>Check if all regression coefficient estimations are significant by t-values.\nNot enough significance is penalised with ABS(T-value * signif_weight) for every occurrence,\nresult is weighted by the number of regressors.</p>\n\n<p>T-value allows to measure how big the \"error\" is, so facilitates algorithmic optimisation greatly.\nT-value is preferred over p-value due to the already existing sign and range [-Inf, Inf] rather\nthan [0, Inf].</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  FERMATRICA Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.p_value", "modulename": "fermatrica.evaluation.scoring", "qualname": "p_value", "kind": "function", "doc": "<p>Check if all regression coefficient estimations are significant by p-values.\nNot enough significance to be calculated as (p-value * signif_weight) for every occurrence,\nresult is weighted by the number of regressors.</p>\n\n<p>IMPORTANT. In this function the smaller is the result, the better.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  FERMATRICA Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span> <span class=\"o\">|</span> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.durbin_watson", "modulename": "fermatrica.evaluation.scoring", "qualname": "durbin_watson", "kind": "function", "doc": "<p>Durbin-Watson test for autocorrelation. Assumes OLS linear model as <code>model.obj.models['main']</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  FERMATRICA Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.durbin_watson_score", "modulename": "fermatrica.evaluation.scoring", "qualname": "durbin_watson_score", "kind": "function", "doc": "<p>Durbin-Watson test for autocorrelation. Assumes OLS linear model as <code>model.obj.models['main']</code>.\nSpecific version used mostly for combined scoring</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  FERMATRICA Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.evaluation.scoring.vif", "modulename": "fermatrica.evaluation.scoring", "qualname": "vif", "kind": "function", "doc": "<p>Calculate VIF with OLS or similar model. <code>statsmodels</code> library is assumed to be used as engine for <code>model_cur</code></p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  FERMATRICA Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model", "modulename": "fermatrica.model", "kind": "module", "doc": "<p>Model: set up model, build model inner layer and run both outer and inner layers to get prediction.\nOuter layer optimisation is placed separately in <code>fermatrica.optim</code></p>\n"}, {"fullname": "fermatrica.model.lhs_fun", "modulename": "fermatrica.model.lhs_fun", "kind": "module", "doc": "<p>Functions to be used in LHS part of the model (i.e. Y transformations). Basic transformation\nis multiplication, all other transformations to be declared here.</p>\n"}, {"fullname": "fermatrica.model.lhs_fun.market_resize", "modulename": "fermatrica.model.lhs_fun", "qualname": "market_resize", "kind": "function", "doc": "<p>Resize main model by additional category model. Useful for simulating competition</p>\n\n<ol>\n<li>Calculate category prediction</li>\n<li>Calculate main (per SKU, brand, region etc.) prediction</li>\n<li>If sum of the (2) predictions by period diverges from (1) prediction, proportionally\nweight (2) predictions to make sum of them equal to (1)</li>\n</ol>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>y</strong>:  predicted Y (target variable)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>predicted Y (target variable)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.lhs_fun.market_resize_flex", "modulename": "fermatrica.model.lhs_fun", "qualname": "market_resize_flex", "kind": "function", "doc": "<p>Resize main model by additional category model with some discount.\nUse it to simulate competition. More flexible than <code>market_resize</code></p>\n\n<ol>\n<li>Calculate category prediction</li>\n<li>Calculate main (per SKU, brand, region etc.) prediction</li>\n<li>If sum of the (2) predictions by period diverges from (1) prediction, proportionally\nweight (2) predictions to make sum of them equal to (1) with discount (1 - wght)</li>\n</ol>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>y</strong>:  predicted Y (target variable)</li>\n<li><strong>wght</strong>:  weight for correction by category prediction</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>predicted Y (target variable)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">wght</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">float</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.lhs_fun.log_exp", "modulename": "fermatrica.model.lhs_fun", "qualname": "log_exp", "kind": "function", "doc": "<p>Log &amp; exp Y (LHS), e.g. for log-log model</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>y</strong>:  predicted Y (target variable)</li>\n<li><strong>to_original</strong>:  from inner model to outer or vice versa</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>predicted Y (target variable), inner or outer</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">to_original</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model", "modulename": "fermatrica.model.model", "kind": "module", "doc": "<p>FERMATRICA Model defines model with all its complexity.</p>\n\n<p>Model class contains info about the FERMATRICA model serving more as the structure than regular OOP class.\nAs for now most model pipeline operations are defined as separate functions in other files, while some service\noperations are class methods.</p>\n\n<p>It is intentionally to separate data from Model class to make it more flexible and lightweight (even assuming\nmany operations could be performed with Model without copying and passing by value).</p>\n\n<p>Ideologically FERMATRICA model consists of two layers:</p>\n\n<ol>\n<li>Outer layer</li>\n<li>Inner layer</li>\n</ol>\n\n<p>Inner layer is fast (main) linear model, OLS for time series or slice data and LME for panel data.\nOuter layer contains number of components applying to the data before and / or after inner layer. Most\nimportant and frequent components are:</p>\n\n<ul>\n<li>RHS (X) variable non-linear transformations</li>\n<li>LHS multiplicative transformations</li>\n<li>additional / helper models (category models, cleanse models)</li>\n</ul>\n\n<p>Check other files of the <code>fermatrica.model</code> folder / namespace / package to search model pipeline and components\nof the Model class.</p>\n"}, {"fullname": "fermatrica.model.model.Model", "modulename": "fermatrica.model.model", "qualname": "Model", "kind": "class", "doc": "<p>Model class contains all the info about the FERMATRICA model. Class consists of two main components:</p>\n\n<ol>\n<li>conf ModelConf object</li>\n<li>obj ModelObj object</li>\n</ol>\n\n<p>ModelConf contains mostly config / data info: LHS definition, RHS definition, params for non-linear\ntransformations, model setup etc.</p>\n\n<p>ModelObj contains mostly Python objects: submodels of different types, function callable objects,\nfunction and module source code etc.</p>\n\n<p>These components could be used separately when performance is at stake or large blocks of code to use\nonly one part. Nevertheless, the main approach is to use Model object as a whole passing Model and\nnot ModelConf or ModelObj as arguments.</p>\n", "bases": "fermatrica_utils.objects.StableClass"}, {"fullname": "fermatrica.model.model.Model.__init__", "modulename": "fermatrica.model.model", "qualname": "Model.__init__", "kind": "function", "doc": "<p>Initialise class</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  path to the directory with model config XLSX file or directory with full model</li>\n<li><strong>custom_predict_fn</strong>:  function for custom prediction (mostly category model), pass if model\nis created from scratch</li>\n<li><strong>adhoc_code</strong>:  list of loaded Python modules with adhoc code, pass if model is created from scratch</li>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>if_stable</strong>:  prevent instance from creating new objects after initialising</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">custom_predict_fn</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">adhoc_code</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_stable</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "fermatrica.model.model.Model.conf", "modulename": "fermatrica.model.model", "qualname": "Model.conf", "kind": "variable", "doc": "<p></p>\n", "annotation": ": fermatrica.model.model_conf.ModelConf"}, {"fullname": "fermatrica.model.model.Model.obj", "modulename": "fermatrica.model.model", "qualname": "Model.obj", "kind": "variable", "doc": "<p></p>\n", "annotation": ": fermatrica.model.model_obj.ModelObj"}, {"fullname": "fermatrica.model.model.Model.save", "modulename": "fermatrica.model.model", "qualname": "Model.save", "kind": "function", "doc": "<p>Save Model with extra data</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model_rep</strong>:  ModelRep object used for reporting (see FERMATRICA_REP) or None</li>\n<li><strong>path</strong>:  path to the up-directory, where model directory to be created</li>\n<li><strong>save_format</strong>:  \"XLSX\" is implemented as for now only</li>\n<li><strong>save_tag</strong>:  specific tag to name model directory; if None, time stamp to be used</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">model_rep</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;XLSX&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_tag</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model.model_load_ext", "modulename": "fermatrica.model.model", "qualname": "model_load_ext", "kind": "function", "doc": "<p>Load saved model with extra elements</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_path</strong>:  path to the directory with saved model</li>\n<li><strong>missed_stop</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">missed_stop</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model_conf", "modulename": "fermatrica.model.model_conf", "kind": "module", "doc": "<p>FERMATRICA ModelConf is one of two components of Model. ModelConf keeps info related to the model:\nscalars, strings, tables. As such it differs from ModelObj containing Python objects essential\nfor the model.</p>\n"}, {"fullname": "fermatrica.model.model_conf.ModelConf", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf", "kind": "class", "doc": "<p>ModelConf (model config) keeps together setup, LHS, RHS, params transformations etc.\nUse as the component / attribute of <code>fermatrica.model.model.Model</code></p>\n", "bases": "fermatrica_utils.objects.StableClass"}, {"fullname": "fermatrica.model.model_conf.ModelConf.__init__", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf.__init__", "kind": "function", "doc": "<p>Initialise instance</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  path to the Excel file containing ModelConf info</li>\n<li><strong>ds</strong>:  dataset to calculate starting values etc.</li>\n<li><strong>if_stable</strong>:  prevent instance from creating new objects after initialising</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_stable</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "fermatrica.model.model_conf.ModelConf.params", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf.params", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame"}, {"fullname": "fermatrica.model.model_conf.ModelConf.model_rhs", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf.model_rhs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame"}, {"fullname": "fermatrica.model.model_conf.ModelConf.model_lhs", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf.model_lhs", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica.model.model_conf.ModelConf.scoring", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf.scoring", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame"}, {"fullname": "fermatrica.model.model_conf.ModelConf.scoring_dict", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf.scoring_dict", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict"}, {"fullname": "fermatrica.model.model_conf.ModelConf.trans_path_df", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf.trans_path_df", "kind": "variable", "doc": "<p></p>\n", "annotation": ": pandas.core.frame.DataFrame | None"}, {"fullname": "fermatrica.model.model_conf.ModelConf.model_type", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf.model_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "fermatrica.model.model_conf.ModelConf.conversion_var", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf.conversion_var", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "fermatrica.model.model_conf.ModelConf.summary_type", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf.summary_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "fermatrica.model.model_conf.ModelConf.model_objects", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf.model_objects", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.model.model_conf.ModelConf.save", "modulename": "fermatrica.model.model_conf", "qualname": "ModelConf.save", "kind": "function", "doc": "<p>Save ModelConf</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  path to the directory to save</li>\n<li><strong>save_format</strong>:  only \"XLSX\" is supported as for now</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span>, </span><span class=\"param\"><span class=\"n\">save_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;XLSX&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model_conf.params_expand", "modulename": "fermatrica.model.model_conf", "qualname": "params_expand", "kind": "function", "doc": "<p>Cleanse transformation params table and expand if different params per group are expected.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>params</strong>:  params DataFrame</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model_obj", "modulename": "fermatrica.model.model_obj", "kind": "module", "doc": "<p>FERMATRICA ModelObj is one of two components of Model. ModelObj contains Python objects essential\nfor the model. As such it differs from ModelConf keeping info related to the model:\nscalars, strings, tables.</p>\n"}, {"fullname": "fermatrica.model.model_obj.ModelObj", "modulename": "fermatrica.model.model_obj", "qualname": "ModelObj", "kind": "class", "doc": "<p>ModelObj (model objects) keeps programming / callable objects of the model.\nUse as the component / attribute of <code>fermatrica.model.model.Model</code></p>\n", "bases": "fermatrica_utils.objects.StableClass"}, {"fullname": "fermatrica.model.model_obj.ModelObj.__init__", "modulename": "fermatrica.model.model_obj", "qualname": "ModelObj.__init__", "kind": "function", "doc": "<p>Initialise instance</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_conf</strong>:  ModelConf object (created via Model() before ModelObj)</li>\n<li><strong>custom_predict_fn</strong>:  function for custom prediction (mostly category model), pass if model\nis created from scratch</li>\n<li><strong>adhoc_code</strong>:  list of loaded Python modules with adhoc code, pass if model is created from scratch</li>\n<li><strong>if_stable</strong>:  prevent instance from creating new objects after initialising</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model_conf</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span>,</span><span class=\"param\">\t<span class=\"n\">custom_predict_fn</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">adhoc_code</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">if_stable</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span>)</span>"}, {"fullname": "fermatrica.model.model_obj.ModelObj.transform_lhs_fn", "modulename": "fermatrica.model.model_obj", "qualname": "ModelObj.transform_lhs_fn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Callable]"}, {"fullname": "fermatrica.model.model_obj.ModelObj.transform_lhs_src", "modulename": "fermatrica.model.model_obj", "qualname": "ModelObj.transform_lhs_src", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "fermatrica.model.model_obj.ModelObj.custom_predict_fn", "modulename": "fermatrica.model.model_obj", "qualname": "ModelObj.custom_predict_fn", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Callable]"}, {"fullname": "fermatrica.model.model_obj.ModelObj.custom_predict_nm", "modulename": "fermatrica.model.model_obj", "qualname": "ModelObj.custom_predict_nm", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None"}, {"fullname": "fermatrica.model.model_obj.ModelObj.models", "modulename": "fermatrica.model.model_obj", "qualname": "ModelObj.models", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict | None"}, {"fullname": "fermatrica.model.model_obj.ModelObj.adhoc_code_src", "modulename": "fermatrica.model.model_obj", "qualname": "ModelObj.adhoc_code_src", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict | None"}, {"fullname": "fermatrica.model.model_obj.ModelObj.adhoc_code_fill", "modulename": "fermatrica.model.model_obj", "qualname": "ModelObj.adhoc_code_fill", "kind": "function", "doc": "<p>Get source code from loaded adhoc Python modules and save them as <code>adhoc_code_src</code> attribute</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>adhoc_code</strong>:  adhoc Python modules</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">adhoc_code</span><span class=\"p\">:</span> <span class=\"nb\">list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model_obj.ModelObj.restore_loaded", "modulename": "fermatrica.model.model_obj", "qualname": "ModelObj.restore_loaded", "kind": "function", "doc": "<p>When pickling it is important to destroy all callable attributes as non-pickable (and potentially\nnon-restorable). When loading callable attributes to be restored from saved source code (by name\nfrom saved module code or directly from saved function source code)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_conf</strong>:  ModelConf object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">model_conf</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_conf</span><span class=\"o\">.</span><span class=\"n\">ModelConf</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model_obj.ModelObj.save", "modulename": "fermatrica.model.model_obj", "qualname": "ModelObj.save", "kind": "function", "doc": "<p>Save ModelObj</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  path to the folder</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model_obj.transform_lhs_template", "modulename": "fermatrica.model.model_obj", "qualname": "transform_lhs_template", "kind": "function", "doc": "<p>Template to dynamically build LTS transform function from LHS settings in ModelConf</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>y</strong>:  target variable</li>\n<li><strong>coef</strong>:  dictionary with coefficients</li>\n<li><strong>to_original</strong>:  direction of the transformation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">coef</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_utils</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">DotDict</span>,</span><span class=\"param\">\t<span class=\"n\">to_original</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model_obj.transform_lhs_empty", "modulename": "fermatrica.model.model_obj", "qualname": "transform_lhs_empty", "kind": "function", "doc": "<p>Technical function to run program smoothly, if no LHS transformation is required</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>y</strong>:  target variable</li>\n<li><strong>coef</strong>:  dictionary with coefficients</li>\n<li><strong>to_original</strong>:  direction of the transformation</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span>,</span><span class=\"param\">\t<span class=\"n\">coef</span><span class=\"p\">:</span> <span class=\"n\">fermatrica_utils</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">arrays</span><span class=\"o\">.</span><span class=\"n\">DotDict</span>,</span><span class=\"param\">\t<span class=\"n\">to_original</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model_obj.transform_lhs_generate", "modulename": "fermatrica.model.model_obj", "qualname": "transform_lhs_generate", "kind": "function", "doc": "<p>Creates LHS transformation function from source</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fn_src</strong>:  pandas DataFrame containing order, type and source code of LHS transformations</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fn_src</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model_obj.fun_find", "modulename": "fermatrica.model.model_obj", "qualname": "fun_find", "kind": "function", "doc": "<p>Restores custom predict function (mostly category model).</p>\n\n<p>Function cannot be pickled and restored properly w/o its environment so environment\nto be loaded first.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fn_name</strong>:  full function name including \"path\" (module tree with dots)</li>\n<li><strong>env_code_src</strong>:  dictionary of source code of Python modules to look function through</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fn_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">env_code_src</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model_obj.fun_generate", "modulename": "fermatrica.model.model_obj", "qualname": "fun_generate", "kind": "function", "doc": "<p>Could generate any function from source, but mostly to generate transform_lhs_fn.</p>\n\n<p>It is important to place it here and not in FERMATRICA_UTILS to add LHS functions\navailable in the environment. Another possible approach could be adding import\ninside fun_generate as dynamic code from argument, but could be difficult and complicated\nas well.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>fn_src</strong>:  function source code</li>\n<li><strong>fn_name</strong>:  function name</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fn_src</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">fn_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;transform_lhs_fn&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model_obj.load", "modulename": "fermatrica.model.model_obj", "qualname": "load", "kind": "function", "doc": "<p>Load ModelObj from disc</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong>:  path to ModelObj LZMA-archived pickle</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_obj</span><span class=\"o\">.</span><span class=\"n\">ModelObj</span>:</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.model_obj.prepickle", "modulename": "fermatrica.model.model_obj", "qualname": "prepickle", "kind": "function", "doc": "<p>Remove callable objects from ModelObj object before pickling (could be not pickable)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model_obj</strong>:  ModelObj object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model_obj</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model_obj</span><span class=\"o\">.</span><span class=\"n\">ModelObj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.predict", "modulename": "fermatrica.model.predict", "kind": "module", "doc": "<p>Build inner layer of FERMATRICA Model and run LHA part of the outer layer and total inner layer to get prediction.</p>\n\n<p>Architecture could seem a bit unusual: fit and predict operations are combined in the sole function\n<code>fit_predict()</code> with boolean argument <code>if_fit</code>. It is intentional to boost performance: due to\nexistence of the LHS transformations separate fit would require extra run of the LHS.</p>\n\n<p>Another part of the outer layer (X transformations) is separated into <code>transform</code> module and runs separately\nto boost performance as well (it is by far the most \"expensive\" part of the model run). So to build the model\nsomeone needs to run <code>transform()</code> and then <code>fit_predict()</code> with <code>if_fit=True</code> argument.</p>\n\n<p>Useful links:</p>\n\n<pre><code>statsmodels: https://www.statsmodels.org/stable/example_formulas.html\n    https://www.statsmodels.org/dev/examples/notebooks/generated/ols.html\n    https://www.statsmodels.org/dev/examples/notebooks/generated/mixed_lm_example.html\nlinearmodels: https://bashtage.github.io/linearmodels/panel/panel/linearmodels.panel.model.PanelOLS.html\n    main issue : Pandas indices used to define fixed effects\n</code></pre>\n"}, {"fullname": "fermatrica.model.predict.predict_lme", "modulename": "fermatrica.model.predict", "qualname": "predict_lme", "kind": "function", "doc": "<p>Specific prediction for LME inner model.</p>\n\n<p>Statsmodels LME predicts only fixed effects (i.e. shared slopes), so random effects (group specific)\nto be added manually.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model</strong>:  Model object</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>predicted series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>, </span><span class=\"param\"><span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.predict.fit_predict", "modulename": "fermatrica.model.predict", "qualname": "fit_predict", "kind": "function", "doc": "<p>Fit and predict wrapper function</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  main dataset</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>if_fit</strong>:  fit or predict using existing model</li>\n<li><strong>if_verbose</strong>:  print diagnostic / progress info</li>\n<li><strong>return_full</strong>:  set False when optimising, True when predicting</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>predicted series or tuple of predicted series, raw (inner) predicted series and Model object</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">if_fit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">if_verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">return_full</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.predict.predict_ext", "modulename": "fermatrica.model.predict", "qualname": "predict_ext", "kind": "function", "doc": "<p>Create datasets of 'extended' prediction: observed, predicted, unit of analysis details etc.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>ds</strong>:  main dataset</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>prediction data</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform", "modulename": "fermatrica.model.transform", "kind": "module", "doc": "<p>Non-linear (mostly) transformations of X variables. These are part of the model outer layer and are vital\nto model architecture.</p>\n\n<p>Because of fundamental issues with fitting non-linear models, MM model is split into two layers:</p>\n\n<ol>\n<li>Non-linear parametric transformations of the independent variables</li>\n<li>Linear model based of the transformed in (1) variables</li>\n</ol>\n\n<p>FERMATRICA greatly expands (1) layer from just transformations of the independent variables to more complex\nouter layer. However, \"classic\" transformations are still of great importance. These transformations\n(with some extras concerning group-by) are defined here.</p>\n\n<p>This module contains high- and medium-level wrappers for the whole transformation pipeline and single\ntransformation functions as well. Low-level function working with vectors directly are defined in\n<code>fermatrica.model.transform_fun</code>.</p>\n\n<p>IMPORTANT. Transformation functions are not designed to be used directly. Call them via <code>model.conf.params</code>\ndata frame / <code>params</code> sheet in <code>model_conf.xlsx</code> file.</p>\n"}, {"fullname": "fermatrica.model.transform.transform", "modulename": "fermatrica.model.transform", "qualname": "transform", "kind": "function", "doc": "<p>Higher-level function to run all transformation defined in <code>model.conf.params</code> with <code>ds</code> dataset</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>set_start</strong>:  calculate starting values according to 'formula' in params table</li>\n<li><strong>if_by_ref</strong>:  run transformations by reference or not (concerns ds only)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">set_start</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">if_by_ref</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.lag", "modulename": "fermatrica.model.transform", "qualname": "lag", "kind": "function", "doc": "<p>Transformation: lag</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.adstock", "modulename": "fermatrica.model.transform", "qualname": "adstock", "kind": "function", "doc": "<p>Transformation: geometric adstock, weighted by (1 - a). Could be useful to preserve scale (more or less)\nInterface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.adstockp", "modulename": "fermatrica.model.transform", "qualname": "adstockp", "kind": "function", "doc": "<p>Transformation: pure geometric adstock.\nInterface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.adstockpd", "modulename": "fermatrica.model.transform", "qualname": "adstockpd", "kind": "function", "doc": "<p>Transformation: pure geometric adstock with two weights. Effectively linear combination of two adstocks,\nuseful to prevent sign switch of one of the components.</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.dwbl", "modulename": "fermatrica.model.transform", "qualname": "dwbl", "kind": "function", "doc": "<p>Transformation: Weibull-based time series transformation. More sophisticated substitute to\ngeometric adstock, but not especially human-friendly.</p>\n\n<p>IMPORTANT. This implementation could be sensitive to new periods added to series.</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.dwblp", "modulename": "fermatrica.model.transform", "qualname": "dwblp", "kind": "function", "doc": "<p>Transformation: Weibull-based time series transformation. More sophisticated substitute to\ngeometric adstock, but not especially human-friendly.</p>\n\n<p>\"Pure\" flavour, non-sensitive to new periods added to series.</p>\n\n<p>Interface is standard among all transformation functions.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.mar", "modulename": "fermatrica.model.transform", "qualname": "mar", "kind": "function", "doc": "<p>Transformation: right moving average</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.infl", "modulename": "fermatrica.model.transform", "qualname": "infl", "kind": "function", "doc": "<p>Transformation: inflation. Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.age", "modulename": "fermatrica.model.transform", "qualname": "age", "kind": "function", "doc": "<p>Transformation: age of the entity</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.scale", "modulename": "fermatrica.model.transform", "qualname": "scale", "kind": "function", "doc": "<p>Transformation: classic scaling: (X - median(X)) / STD(X)</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.share", "modulename": "fermatrica.model.transform", "qualname": "share", "kind": "function", "doc": "<p>Transformation: share (share of voice, share os spends, share of sales etc.)</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.softmaxfull", "modulename": "fermatrica.model.transform", "qualname": "softmaxfull", "kind": "function", "doc": "<p>Transformation: flavour of logistic saturation curve with unit-specific <code>avg</code> and \"abstract\" <code>lambda</code>.\nThe more is lambda, less steep is the curve.</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.softmax", "modulename": "fermatrica.model.transform", "qualname": "softmax", "kind": "function", "doc": "<p>Transformation: flavour of logistic saturation curve with unit-specific <code>avg</code> and \"abstract\" <code>lambda</code>,\nscaled as minus 0-value. The more is lambda, less steep is the curve.</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.expm1", "modulename": "fermatrica.model.transform", "qualname": "expm1", "kind": "function", "doc": "<p>Transformation: exponential transformation minus 1 (to restore after logarithm(x + 1))</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.expm1scaled", "modulename": "fermatrica.model.transform", "qualname": "expm1scaled", "kind": "function", "doc": "<p>Transformation: exponential transformation minus 1 (to restore after logarithm(x + 1)) with scaling.\nScaling is essential to keep coefficients in outer layer of the model more or less valid</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.logistic", "modulename": "fermatrica.model.transform", "qualname": "logistic", "kind": "function", "doc": "<p>Transformation: logistic saturation curve.\nInterface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.gompertz", "modulename": "fermatrica.model.transform", "qualname": "gompertz", "kind": "function", "doc": "<p>Transformation: Gompertz asymmetric sigmoid</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.adbudg", "modulename": "fermatrica.model.transform", "qualname": "adbudg", "kind": "function", "doc": "<p>Transformation: saturation curve with both power / logarithm and S-curve versions\ndepending on param values.</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.power", "modulename": "fermatrica.model.transform", "qualname": "power", "kind": "function", "doc": "<p>Transformation: power</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.gaussian", "modulename": "fermatrica.model.transform", "qualname": "gaussian", "kind": "function", "doc": "<p>Transformation: Gaussian (bell-curve, normal distribution). Useful to describe life cycle</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.gaussianzero", "modulename": "fermatrica.model.transform", "qualname": "gaussianzero", "kind": "function", "doc": "<p>Transformation: Gaussian (bell-curve, normal distribution) scaled minus 0-value</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.lorentzian", "modulename": "fermatrica.model.transform", "qualname": "lorentzian", "kind": "function", "doc": "<p>Transformation: Lorentzian (more \"pointed\" bell-curve)</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.loggaussian", "modulename": "fermatrica.model.transform", "qualname": "loggaussian", "kind": "function", "doc": "<p>Transformation: log-gaussian (asymmetric bell-curve)</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.arl", "modulename": "fermatrica.model.transform", "qualname": "arl", "kind": "function", "doc": "<p>Transformation: complex transformation, combining saturation, weighted geometric adstock, lag (fixed order)</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n<li><strong>adb</strong>:  use logistic or adbudg saturation. Set as separate variable for historical reason,\nuse <code>arlp()</code> function if <code>adb=False</code> is required</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span>,</span><span class=\"param\">\t<span class=\"n\">adb</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.arlp", "modulename": "fermatrica.model.transform", "qualname": "arlp", "kind": "function", "doc": "<p>Transformation: complex transformation, combining saturation, weighted geometric adstock, lag (fixed order).\n\"Pure\" flavour with S-version of saturation only</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">index_vars</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"n\">nan</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform.price", "modulename": "fermatrica.model.transform", "qualname": "price", "kind": "function", "doc": "<p>Transformation: complex transformation to calculate relative prices</p>\n\n<p>Interface is standard among all transformation functions</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>var</strong>:  raw variable string name</li>\n<li><strong>params_subset</strong>:  subset of <code>params</code> frame containing params specific for <code>var</code> variable and current\ntransformation</li>\n<li><strong>index_vars</strong>:  string containing variable name or names to apply transformation separately, e.g.\n<code>\"bs_key\"</code> or <code>\"superbrand\", \"master\"</code></li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>transformed time series</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">var_raw</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">params_subset</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun", "modulename": "fermatrica.model.transform_fun", "kind": "module", "doc": "<p>Transformation functions per se: working (mostly) with vectors. Returned value is typically vector or series\ncontaining new, transformed variable.</p>\n\n<p>For medium- and high-level wrappers see <code>fermatrica.model.transform</code>.</p>\n\n<hr />\n\n<p>The function <code>recursive_filter</code> has the specific license, different form the license of the other source code of the file\nand of the whole project. The function <code>recursive_filter</code> is adopted with some modification from <code>statsmodels</code> library\nand is redistributed under BSD-3-Clause License:</p>\n\n<p>\"\nCopyright (C) 2006, Jonathan E. Taylor\nAll rights reserved.</p>\n\n<p>Copyright (c) 2006-2008 Scipy Developers.\nAll rights reserved.</p>\n\n<p>Copyright (c) 2009-2018 statsmodels Developers.\nAll rights reserved.</p>\n\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:</p>\n\n<p>a. Redistributions of source code must retain the above copyright notice,\n     this list of conditions and the following disclaimer.\n  b. Redistributions in binary form must reproduce the above copyright\n     notice, this list of conditions and the following disclaimer in the\n     documentation and/or other materials provided with the distribution.\n  c. Neither the name of statsmodels nor the names of its contributors\n     may be used to endorse or promote products derived from this software\n     without specific prior written permission.</p>\n\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\nARE DISCLAIMED. IN NO EVENT SHALL STATSMODELS OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\nLIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY\nOUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGE.\n\"</p>\n"}, {"fullname": "fermatrica.model.transform_fun.recursive_filter", "modulename": "fermatrica.model.transform_fun", "qualname": "recursive_filter", "kind": "function", "doc": "<p>Autoregressive, or recursive, filtering.\nMore performance efficient version derived from statsmodel's.</p>\n\n<p>Computes the recursive filter ::</p>\n\n<pre><code>y[n] = ar_coeff[0] * y[n-1] + ...\n        + ar_coeff[n_coeff - 1] * y[n - n_coeff] + x[n]\n</code></pre>\n\n<p>where n_coeff = len(n_coeff).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  array_like\nTime-series 1d data as Pandas Series or Numpy array</li>\n<li><strong>ar_coeff</strong>:  array_like\nAR coefficients in reverse time order. See Notes for details.</li>\n<li><strong>init</strong>:  array_like\nInitial values of the time-series prior to the first value of y.\nThe default is zero.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>array_like\n      Filtered array, number of columns determined by x and ar_coeff. If x\n      is a pandas object than a Series is returned.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">ar_coeff</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">init</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun.weibull_multi_response", "modulename": "fermatrica.model.transform_fun", "qualname": "weibull_multi_response", "kind": "function", "doc": "<p>Weibull-based time series transformation. More sophisticated substitute to\ngeometric adstock, but not especially human-friendly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  vector / series to apply transformation</li>\n<li><strong>params_dict</strong>:  transformation function params</li>\n<li><strong>if_weight</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">params_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">if_weight</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun.sum_inv_exp_dist", "modulename": "fermatrica.model.transform_fun", "qualname": "sum_inv_exp_dist", "kind": "function", "doc": "<p>Sum of inverted exponented distance. Used in price calculation to find brand clusters by price</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  vector / series to apply transformation</li>\n<li><strong>wght</strong>: </li>\n<li><strong>product</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">wght</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">product</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun.scale_classic_median", "modulename": "fermatrica.model.transform_fun", "qualname": "scale_classic_median", "kind": "function", "doc": "<p>Classic scaling: (X - median(X)) / STD(X).</p>\n\n<p>Infinite values created after calculation are replaced with raw values: effectively if raw vector\nis constant and standard deviation is 0, the whole vector to be returned as is.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  vector / series to apply transformation</li>\n<li><strong>mask</strong>: </li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>,</span><span class=\"param\">\t<span class=\"n\">mask</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun.adbudg", "modulename": "fermatrica.model.transform_fun", "qualname": "adbudg", "kind": "function", "doc": "<p>Saturation curve with both power / logarithm and S-curve versions depending on param values.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  vector / series to apply transformation</li>\n<li><strong>params_dict</strong>:  transformation function params</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">params_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun.logistic", "modulename": "fermatrica.model.transform_fun", "qualname": "logistic", "kind": "function", "doc": "<p>Logistic saturation curve.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  vector / series to apply transformation</li>\n<li><strong>params_dict</strong>:  transformation function params</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">params_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun.softmax", "modulename": "fermatrica.model.transform_fun", "qualname": "softmax", "kind": "function", "doc": "<p>Flavour of logistic saturation curve with unit-specific <code>avg</code> and \"abstract\" <code>lambda</code>.\nThe more is lambda, less steep is the curve.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  vector / series to apply transformation</li>\n<li><strong>params_dict</strong>:  transformation function params</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">params_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun.gompertz", "modulename": "fermatrica.model.transform_fun", "qualname": "gompertz", "kind": "function", "doc": "<p>Gompertz asymmetric sigmoid.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  vector / series to apply transformation</li>\n<li><strong>params_dict</strong>:  transformation function params</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">params_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun.gaussian", "modulename": "fermatrica.model.transform_fun", "qualname": "gaussian", "kind": "function", "doc": "<p>Gaussian (bell-curve, normal distribution).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  vector / series to apply transformation</li>\n<li><strong>params_dict</strong>:  transformation function params</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">params_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun.log_gaussian", "modulename": "fermatrica.model.transform_fun", "qualname": "log_gaussian", "kind": "function", "doc": "<p>Log-gaussian (asymmetric bell-curve)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  vector / series to apply transformation</li>\n<li><strong>params_dict</strong>:  transformation function params</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">params_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun.lorentzian", "modulename": "fermatrica.model.transform_fun", "qualname": "lorentzian", "kind": "function", "doc": "<p>Lorentzian (more \"pointed\" bell-curve).</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>x</strong>:  vector / series to apply transformation</li>\n<li><strong>params_dict</strong>:  transformation function params</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span>, </span><span class=\"param\"><span class=\"n\">params_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun.tv_clipl_affinity", "modulename": "fermatrica.model.transform_fun", "qualname": "tv_clipl_affinity", "kind": "function", "doc": "<p>Complex function to weight TV OTS by brands' affinity and clip duration</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>params_dict</strong>: </li>\n<li><strong>cln_tv</strong>:  names of the TV OTS columns</li>\n<li><strong>cln_aff</strong>:  names of the columns with brands' affinity data</li>\n<li><strong>cln_clipl</strong>:  names of the clip duration columns</li>\n<li><strong>tv_pattern</strong>:  specific regex pattern containing media type and placement type, e.g. 'sponsor_nat'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">params_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">cln_tv</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">cln_aff</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">cln_clipl</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">tv_pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.model.transform_fun.tv_affinity", "modulename": "fermatrica.model.transform_fun", "qualname": "tv_affinity", "kind": "function", "doc": "<p>Complex function to weight TV OTS by brands' affinity. The difference with <code>tv_affinity_clipl</code>\nis ignoring clip duration here.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>params_dict</strong>: </li>\n<li><strong>cln_tv</strong>:  names of the TV OTS columns</li>\n<li><strong>cln_aff</strong>:  names of the columns with brands' affinity data</li>\n<li><strong>cln_clipl</strong>:  names of the clip duration columns</li>\n<li><strong>tv_pattern</strong>:  specific regex pattern containing media type and placement type, e.g. 'sponsor_nat'</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">params_dict</span><span class=\"p\">:</span> <span class=\"nb\">dict</span>,</span><span class=\"param\">\t<span class=\"n\">cln_tv</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">cln_aff</span><span class=\"p\">:</span> <span class=\"nb\">list</span>,</span><span class=\"param\">\t<span class=\"n\">tv_pattern</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim", "modulename": "fermatrica.optim", "kind": "module", "doc": "<p>Optimize outer layer of the model.</p>\n\n<p>Both global and local algorithms are supported. As for now two derivative-free algos are included:</p>\n\n<ol>\n<li>COBYLA constrained optimization by linear approximations (local)</li>\n<li>PyGad genetic algorithm (global)</li>\n</ol>\n\n<p>However, FERMATRICA architecture allows fast and simple adding new algorithms, and some\nalgos could be added later.</p>\n\n<p>Derivative-free approach allows optimising without calculating (analytical) gradient what could be\nvery complex and time-consuming. However, some derivative algo (e.g. GS) could be added later\nat least for some most popular transformations.</p>\n"}, {"fullname": "fermatrica.optim.optim", "modulename": "fermatrica.optim.optim", "kind": "module", "doc": "<p>Objective functions, wrappers and other components for model outer layer optimization.</p>\n\n<p>Both global and local algorithms are supported. As for now two derivative-free algos are included:</p>\n\n<ol>\n<li>COBYLA constrained optimization by linear approximations (local)</li>\n<li>PyGad genetic algorithm (global)</li>\n</ol>\n\n<p>However, FERMATRICA architecture allows fast and simple adding new algorithms, and some\nalgos could be added later.</p>\n\n<p>Derivative-free approach allows optimising without calculating (analytical) gradient what could be\nvery complex and time-consuming. However, some derivative algo (e.g. GS) could be added later\nat least for some most popular transformations.</p>\n\n<p>Some \"extra\" imports in this file better to be preserved to be accessible for parallel computations</p>\n"}, {"fullname": "fermatrica.optim.optim.objective_fun_generate", "modulename": "fermatrica.optim.optim", "qualname": "objective_fun_generate", "kind": "function", "doc": "<p>Objective function generator / fabric. Variables required by model to run could be assigned to\nthe closure one time instead of passing every iteration. Works fine in single-process environment\nonly, so to be used for local algorithms mostly.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>revert_score_sign</strong>:  if algo minimizes score, and the score is the bigger, the better; or vice versa</li>\n<li><strong>error_score</strong>:  extremely big (or small) value to be used as score if fit_predict returns None (error)</li>\n<li><strong>verbose</strong>:  print diagnostic / progress info</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>generated objective function</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">revert_score_sign</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">error_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1000000000000.0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.optim.objective_fun_args", "modulename": "fermatrica.optim.optim", "qualname": "objective_fun_args", "kind": "function", "doc": "<p>Objective function. Flavour for parallel computing, so all args are in a dict and no non-local variables\nare used. Function generator / fabric is also not used because of the same reason.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>params_cur</strong>:  current params vector</li>\n<li><strong>solution_idx</strong>:  not used explicitly</li>\n<li><strong>args</strong>:  arguments for model run packed in dictionary</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>current score</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">params_cur</span><span class=\"p\">:</span> <span class=\"nb\">list</span> <span class=\"o\">|</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">ndarray</span> <span class=\"o\">|</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">series</span><span class=\"o\">.</span><span class=\"n\">Series</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">solution_idx</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"nb\">dict</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.optim.optimize_local_cobyla", "modulename": "fermatrica.optim.optim", "qualname": "optimize_local_cobyla", "kind": "function", "doc": "<p>Wrapper for COBYLA constrained optimization by local approximations algorithm (local). COBYLA\nis derivative-free, so no analytical gradient is required.</p>\n\n<p>COBYLA minimizes score, so be careful to revert score if it is designed as maximizer before use\nor with argument <code>revert_score_sign=True</code>.</p>\n\n<p>Epochs are required to shuffle params a bit and to help algo get out from local optimum (sometimes)\nand to speed up calculation.</p>\n\n<p>Early stop threshold is defined as minimum absolute score gain per iteration. However, algo doesn't\nrespect it directly, so don't be upset to see it working with much lesser gain per iteration.</p>\n\n<p>Local algorithms could be sensitive to starting (initial) values and to the number of optimising\nparams. If params number is big enough (say, dozens) it is better to use it chunks, tuning\none portion of params after another. Params for every chunk should be chosen wisely and not\njust first 10 or 20 params, them second 10 or 20 etc.</p>\n\n<p>Nlopt COBYLA implementation is preferred before <code>scipy.optimize.minimize(method='COBYLA')</code> because\nlatter doesn't respect constraints accurately.</p>\n\n<p>However, Nlopt COBYLA has its own annoying issue. If improvement is (much?) below machine precision,\nit stops with error. We have some thoughts about workarounds to be implemented later, but as for now\nbe aware starting values are not to close to the borders, e.g. 0.9999999999999 when border is 1.0.\nMove starting value a little further, e.g. to .95, and in most times it will be enough.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>revert_score_sign</strong>:  if the score is the bigger, the better; this algo minimizes score</li>\n<li><strong>verbose</strong>:  print diagnostic or progress information</li>\n<li><strong>epochs</strong>:  number of epochs</li>\n<li><strong>iters_epoch</strong>:  number of objective function calculations per epoch</li>\n<li><strong>error_score</strong>:  extremely big value to be used as score if fit_predict returns None (error)</li>\n<li><strong>ftol_abs: early stop threshold</strong>:  minimum absolute score gain per iteration, see description</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuned Model</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">revert_score_sign</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">iters_epoch</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">error_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">1000000000000.0</span>,</span><span class=\"param\">\t<span class=\"n\">ftol_abs</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.optim.optimize_global_ga", "modulename": "fermatrica.optim.optim", "qualname": "optimize_global_ga", "kind": "function", "doc": "<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>ds</strong>:  dataset</li>\n<li><strong>model</strong>:  Model object</li>\n<li><strong>revert_score_sign</strong>:  if the score is the smaller, the better; this algo maximizes score</li>\n<li><strong>verbose</strong>:  print diagnostic or progress information</li>\n<li><strong>epochs</strong>:  number of epochs; every epoch is independent form others and return its own score and tuned\nparams vector</li>\n<li><strong>iters_epoch</strong>:  number of iterations (not objective function calculation) per epoch</li>\n<li><strong>pop_size: GA param</strong>:  population size</li>\n<li><strong>pmutation: GA param</strong>:  permutations share</li>\n<li><strong>max_no_improvement</strong>:  maximum number of iterations as early stop threshold</li>\n<li><strong>error_score</strong>:  extremely small value to be used as score if fit_predict returns None (error)</li>\n<li><strong>cores</strong>:  processor cores to be used in parallel computing</li>\n<li><strong>save_epoch</strong>:  if every epoch to be saved or path to the folder to save tuned models</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>tuned Model of the last epoch</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ds</span><span class=\"p\">:</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span>,</span><span class=\"param\">\t<span class=\"n\">model</span><span class=\"p\">:</span> <span class=\"n\">fermatrica</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">Model</span>,</span><span class=\"param\">\t<span class=\"n\">revert_score_sign</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">epochs</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">iters_epoch</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">300</span>,</span><span class=\"param\">\t<span class=\"n\">pop_size</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>,</span><span class=\"param\">\t<span class=\"n\">pmutation</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">max_no_improvement</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">error_score</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mf\">1000000000000.0</span>,</span><span class=\"param\">\t<span class=\"n\">cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">save_epoch</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">|</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad", "modulename": "fermatrica.optim.pygad", "kind": "module", "doc": "<p>Genetic Algorithm to optimise outer layer of the model.</p>\n\n<p>Derived from <a href=\"https://github.com/ahmedfgad/GeneticAlgorithmPython\">https://github.com/ahmedfgad/GeneticAlgorithmPython</a> with some changes.</p>\n\n<p>The main goal of this \"fork\" is to adapt algo for multiprocessing and arguments for objective function.\nAs the original library is under development the issues mentioned could some time go away,\nand then we are hope to switch back to the original library. Maybe.</p>\n\n<hr />\n\n<p>This file has the specific license, different form the license of the other source code of the whole project\nand is redistributed under BSD-3-Clause License:</p>\n\n<p>\"\nCopyright GeneticAlgorithmPython Contributors</p>\n\n<p>Redistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:</p>\n\n<ol>\n<li><p>Redistributions of source code must retain the above copyright\nnotice, this list of conditions and the following disclaimer.</p></li>\n<li><p>Redistributions in binary form must reproduce the above copyright\nnotice, this list of conditions and the following disclaimer in the\ndocumentation and/or other materials provided with the distribution.</p></li>\n<li><p>Neither the name of the copyright holder nor the names of its\ncontributors may be used to endorse or promote products derived from\nthis software without specific prior written permission.</p></li>\n</ol>\n\n<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A\nPARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\nPROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\"</p>\n"}, {"fullname": "fermatrica.optim.pygad.GA", "modulename": "fermatrica.optim.pygad", "qualname": "GA", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.__init__", "modulename": "fermatrica.optim.pygad", "qualname": "GA.__init__", "kind": "function", "doc": "<p>The constructor of the GA class accepts all parameters required to create an instance of the GA class. It validates such parameters.</p>\n\n<p>num_generations: Number of generations.\nnum_parents_mating: Number of solutions to be selected as parents in the mating pool.</p>\n\n<p>fitness_func: Accepts a function that must accept 2 parameters (a single solution and its index in the population) and return the fitness value of the solution. Available starting from PyGAD 1.0.17 until 1.0.20 with a single parameter representing the solution. Changed in PyGAD 2.0.0 and higher to include the second parameter representing the solution index.</p>\n\n<p>initial_population: A user-defined initial population. It is useful when the user wants to start the generations with a custom initial population. It defaults to None which means no initial population is specified by the user. In this case, PyGAD creates an initial population using the 'sol_per_pop' and 'num_genes' parameters. An exception is raised if the 'initial_population' is None while any of the 2 parameters ('sol_per_pop' or 'num_genes') is also None.\nsol_per_pop: Number of solutions in the population.\nnum_genes: Number of parameters in the function.</p>\n\n<p>init_range_low: The lower value of the random range from which the gene values in the initial population are selected. It defaults to -4. Available in PyGAD 1.0.20 and higher.\ninit_range_high: The upper value of the random range from which the gene values in the initial population are selected. It defaults to -4. Available in PyGAD 1.0.20.</p>\n\n<h1 id=\"it-is-ok-to-set-the-value-of-any-of-the-2-parameters-init_range_low-and-init_range_high-to-be-equal-higher-or-lower-than-the-other-parameter-ie-init_range_low-is-not-needed-to-be-lower-than-init_range_high\">It is OK to set the value of any of the 2 parameters ('init_range_low' and 'init_range_high') to be equal, higher or lower than the other parameter (i.e. init_range_low is not needed to be lower than init_range_high).</h1>\n\n<p>gene_type: The type of the gene. It is assigned to any of these types (int, float, numpy.int, numpy.int8, numpy.int16, numpy.int32, numpy.int64, numpy.uint, numpy.uint8, numpy.uint16, numpy.uint32, numpy.uint64, numpy.float, numpy.float16, numpy.float32, numpy.float64) and forces all the genes to be of that type.</p>\n\n<p>parent_selection_type: Type of parent selection.\nkeep_parents: If 0, this means no parent in the current population will be used in the next population. If -1, this means all parents in the current population will be used in the next population. If set to a value &gt; 0, then the specified value refers to the number of parents in the current population to be used in the next population. Some parent selection operators such as rank selection, favor population diversity and therefore keeping the parents in the next generation can be beneficial. However, some other parent selection operators, such as roulette wheel selection (RWS), have higher selection pressure and keeping more than one parent in the next generation can seriously harm population diversity. This parameter have an effect only when the keep_elitism parameter is 0. Thanks to Prof. Fernando Jim\u00e9nez Barrionuevo (<a href=\"http://webs.um.es/fernan\">http://webs.um.es/fernan</a>) for editing this sentence.\nK_tournament: When the value of 'parent_selection_type' is 'tournament', the 'K_tournament' parameter specifies the number of solutions from which a parent is selected randomly.</p>\n\n<p>keep_elitism: Added in PyGAD 2.18.0. It can take the value 0 or a positive integer that satisfies (0 &lt;= keep_elitism &lt;= sol_per_pop). It defaults to 1 which means only the best solution in the current generation is kept in the next generation. If assigned 0, this means it has no effect. If assigned a positive integer K, then the best K solutions are kept in the next generation. It cannot be assigned a value greater than the value assigned to the sol_per_pop parameter. If this parameter has a value different than 0, then the keep_parents parameter will have no effect.</p>\n\n<p>crossover_type: Type of the crossover opreator. If  crossover_type=None, then the crossover step is bypassed which means no crossover is applied and thus no offspring will be created in the next generations. The next generation will use the solutions in the current population.\ncrossover_probability: The probability of selecting a solution for the crossover operation. If the solution probability is &lt;= crossover_probability, the solution is selected. The value must be between 0 and 1 inclusive.</p>\n\n<p>mutation_type: Type of the mutation opreator. If mutation_type=None, then the mutation step is bypassed which means no mutation is applied and thus no changes are applied to the offspring created using the crossover operation. The offspring will be used unchanged in the next generation.\nmutation_probability: The probability of selecting a gene for the mutation operation. If the gene probability is &lt;= mutation_probability, the gene is selected. It accepts either a single value for fixed mutation or a list/tuple/numpy.ndarray of 2 values for adaptive mutation. The values must be between 0 and 1 inclusive. If specified, then no need for the 2 parameters mutation_percent_genes and mutation_num_genes.</p>\n\n<p>mutation_by_replacement: An optional bool parameter. It works only when the selected type of mutation is random (mutation_type=\"random\"). In this case, setting mutation_by_replacement=True means replace the gene by the randomly generated value. If False, then it has no effect and random mutation works by adding the random value to the gene.</p>\n\n<p>mutation_percent_genes: Percentage of genes to mutate which defaults to the string 'default' which means 10%. This parameter has no action if any of the 2 parameters mutation_probability or mutation_num_genes exist.\nmutation_num_genes: Number of genes to mutate which defaults to None. If the parameter mutation_num_genes exists, then no need for the parameter mutation_percent_genes. This parameter has no action if the mutation_probability parameter exists.\nrandom_mutation_min_val: The minimum value of the range from which a random value is selected to be added to the selected gene(s) to mutate. It defaults to -1.0.\nrandom_mutation_max_val: The maximum value of the range from which a random value is selected to be added to the selected gene(s) to mutate. It defaults to 1.0.</p>\n\n<p>gene_space: It accepts a list of all possible values of the gene. This list is used in the mutation step. Should be used only if the gene space is a set of discrete values. No need for the 2 parameters (random_mutation_min_val and random_mutation_max_val) if the parameter gene_space exists. Added in PyGAD 2.5.0. In PyGAD 2.11.0, the gene_space can be assigned a dict.</p>\n\n<p>on_start: Accepts a function to be called only once before the genetic algorithm starts its evolution. This function must accept a single parameter representing the instance of the genetic algorithm. Added in PyGAD 2.6.0.\non_fitness: Accepts a function to be called after calculating the fitness values of all solutions in the population. This function must accept 2 parameters: the first one represents the instance of the genetic algorithm and the second one is a list of all solutions' fitness values. Added in PyGAD 2.6.0.\non_parents: Accepts a function to be called after selecting the parents that mates. This function must accept 2 parameters: the first one represents the instance of the genetic algorithm and the second one represents the selected parents. Added in PyGAD 2.6.0.\non_crossover: Accepts a function to be called each time the crossover operation is applied. This function must accept 2 parameters: the first one represents the instance of the genetic algorithm and the second one represents the offspring generated using crossover. Added in PyGAD 2.6.0.\non_mutation: Accepts a function to be called each time the mutation operation is applied. This function must accept 2 parameters: the first one represents the instance of the genetic algorithm and the second one represents the offspring after applying the mutation. Added in PyGAD 2.6.0.\ncallback_generation: Accepts a function to be called after each generation. This function must accept a single parameter representing the instance of the genetic algorithm. If the function returned \"stop\", then the run() method stops without completing the other generations. Starting from PyGAD 2.6.0, the callback_generation parameter is deprecated and should be replaced by the on_generation parameter.\non_generation: Accepts a function to be called after each generation. This function must accept a single parameter representing the instance of the genetic algorithm. If the function returned \"stop\", then the run() method stops without completing the other generations. Added in PyGAD 2.6.0.\non_stop: Accepts a function to be called only once exactly before the genetic algorithm stops or when it completes all the generations. This function must accept 2 parameters: the first one represents the instance of the genetic algorithm and the second one is a list of fitness values of the last population's solutions. Added in PyGAD 2.6.0.</p>\n\n<p>delay_after_gen: Added in PyGAD 2.4.0. It accepts a non-negative number specifying the number of seconds to wait after a generation completes and before going to the next generation. It defaults to 0.0 which means no delay after the generation.</p>\n\n<p>save_best_solutions: Added in PyGAD 2.9.0 and its type is bool. If True, then the best solution in each generation is saved into the 'best_solutions' attribute. Use this parameter with caution as it may cause memory overflow when either the number of generations or the number of genes is large.\nsave_solutions: Added in PyGAD 2.15.0 and its type is bool. If True, then all solutions in each generation are saved into the 'solutions' attribute. Use this parameter with caution as it may cause memory overflow when either the number of generations, number of genes, or number of solutions in population is large.</p>\n\n<p>suppress_warnings: Added in PyGAD 2.10.0 and its type is bool. If True, then no warning messages will be displayed. It defaults to False.</p>\n\n<p>allow_duplicate_genes: Added in PyGAD 2.13.0. If True, then a solution/chromosome may have duplicate gene values. If False, then each gene will have a unique value in its solution.</p>\n\n<p>stop_criteria: Added in PyGAD 2.15.0. It is assigned to some criteria to stop the evolution if at least one criterion holds.</p>\n\n<p>parallel_processing: Added in PyGAD 2.17.0. Defaults to <code>None</code> which means no parallel processing is used. If a positive integer is assigned, it specifies the number of threads to be used. If a list or a tuple of exactly 2 elements is assigned, then: 1) The first element can be either \"process\" or \"thread\" to specify whether processes or threads are used, respectively. 2) The second element can be: 1) A positive integer to select the maximum number of processes or threads to be used. 2) 0 to indicate that parallel processing is not used. This is identical to setting 'parallel_processing=None'. 3) None to use the default value as calculated by the concurrent.futures module.</p>\n\n<p>random_seed: Added in PyGAD 2.18.0. It defines the random seed to be used by the random function generators (we use random functions in the NumPy and random modules). This helps to reproduce the same results by setting the same random seed.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_generations</span>,</span><span class=\"param\">\t<span class=\"n\">num_parents_mating</span>,</span><span class=\"param\">\t<span class=\"n\">fitness_func</span>,</span><span class=\"param\">\t<span class=\"n\">args</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">initial_population</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">sol_per_pop</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_genes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">init_range_low</span><span class=\"o\">=-</span><span class=\"mi\">4</span>,</span><span class=\"param\">\t<span class=\"n\">init_range_high</span><span class=\"o\">=</span><span class=\"mi\">4</span>,</span><span class=\"param\">\tgene_type=&lt;class &#x27;float&#x27;&gt;,</span><span class=\"param\">\t<span class=\"n\">parent_selection_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;sss&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">keep_parents</span><span class=\"o\">=-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">keep_elitism</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">K_tournament</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">crossover_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;single_point&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">crossover_probability</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mutation_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;random&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mutation_probability</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mutation_by_replacement</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">mutation_percent_genes</span><span class=\"o\">=</span><span class=\"s1\">&#39;default&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mutation_num_genes</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">random_mutation_min_val</span><span class=\"o\">=-</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">random_mutation_max_val</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">gene_space</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">allow_duplicate_genes</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">on_start</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">on_fitness</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">on_parents</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">on_crossover</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">on_mutation</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">callback_generation</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">on_generation</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">on_stop</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">delay_after_gen</span><span class=\"o\">=</span><span class=\"mf\">0.0</span>,</span><span class=\"param\">\t<span class=\"n\">save_best_solutions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">save_solutions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">suppress_warnings</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">stop_criteria</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">parallel_processing</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">random_seed</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "fermatrica.optim.pygad.GA.supported_int_types", "modulename": "fermatrica.optim.pygad", "qualname": "GA.supported_int_types", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;numpy.int8&#x27;&gt;, &lt;class &#x27;numpy.int16&#x27;&gt;, &lt;class &#x27;numpy.int32&#x27;&gt;, &lt;class &#x27;numpy.int64&#x27;&gt;, &lt;class &#x27;numpy.uint32&#x27;&gt;, &lt;class &#x27;numpy.uint8&#x27;&gt;, &lt;class &#x27;numpy.uint16&#x27;&gt;, &lt;class &#x27;numpy.uint32&#x27;&gt;, &lt;class &#x27;numpy.uint64&#x27;&gt;]"}, {"fullname": "fermatrica.optim.pygad.GA.supported_float_types", "modulename": "fermatrica.optim.pygad", "qualname": "GA.supported_float_types", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;numpy.float16&#x27;&gt;, &lt;class &#x27;numpy.float32&#x27;&gt;, &lt;class &#x27;numpy.float64&#x27;&gt;]"}, {"fullname": "fermatrica.optim.pygad.GA.supported_int_float_types", "modulename": "fermatrica.optim.pygad", "qualname": "GA.supported_int_float_types", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&lt;class &#x27;int&#x27;&gt;, &lt;class &#x27;numpy.int8&#x27;&gt;, &lt;class &#x27;numpy.int16&#x27;&gt;, &lt;class &#x27;numpy.int32&#x27;&gt;, &lt;class &#x27;numpy.int64&#x27;&gt;, &lt;class &#x27;numpy.uint32&#x27;&gt;, &lt;class &#x27;numpy.uint8&#x27;&gt;, &lt;class &#x27;numpy.uint16&#x27;&gt;, &lt;class &#x27;numpy.uint32&#x27;&gt;, &lt;class &#x27;numpy.uint64&#x27;&gt;, &lt;class &#x27;float&#x27;&gt;, &lt;class &#x27;numpy.float16&#x27;&gt;, &lt;class &#x27;numpy.float32&#x27;&gt;, &lt;class &#x27;numpy.float64&#x27;&gt;]"}, {"fullname": "fermatrica.optim.pygad.GA.random_seed", "modulename": "fermatrica.optim.pygad", "qualname": "GA.random_seed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.mutation_by_replacement", "modulename": "fermatrica.optim.pygad", "qualname": "GA.mutation_by_replacement", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.gene_space_nested", "modulename": "fermatrica.optim.pygad", "qualname": "GA.gene_space_nested", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.gene_space", "modulename": "fermatrica.optim.pygad", "qualname": "GA.gene_space", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.random_mutation_min_val", "modulename": "fermatrica.optim.pygad", "qualname": "GA.random_mutation_min_val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.random_mutation_max_val", "modulename": "fermatrica.optim.pygad", "qualname": "GA.random_mutation_max_val", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.initial_population", "modulename": "fermatrica.optim.pygad", "qualname": "GA.initial_population", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.population", "modulename": "fermatrica.optim.pygad", "qualname": "GA.population", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.num_parents_mating", "modulename": "fermatrica.optim.pygad", "qualname": "GA.num_parents_mating", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.crossover_type", "modulename": "fermatrica.optim.pygad", "qualname": "GA.crossover_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.mutation_type", "modulename": "fermatrica.optim.pygad", "qualname": "GA.mutation_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.K_tournament", "modulename": "fermatrica.optim.pygad", "qualname": "GA.K_tournament", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.keep_parents", "modulename": "fermatrica.optim.pygad", "qualname": "GA.keep_parents", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.keep_elitism", "modulename": "fermatrica.optim.pygad", "qualname": "GA.keep_elitism", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.args", "modulename": "fermatrica.optim.pygad", "qualname": "GA.args", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.allow_duplicate_genes", "modulename": "fermatrica.optim.pygad", "qualname": "GA.allow_duplicate_genes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.stop_criteria", "modulename": "fermatrica.optim.pygad", "qualname": "GA.stop_criteria", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.supported_stop_words", "modulename": "fermatrica.optim.pygad", "qualname": "GA.supported_stop_words", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.run_completed", "modulename": "fermatrica.optim.pygad", "qualname": "GA.run_completed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.generations_completed", "modulename": "fermatrica.optim.pygad", "qualname": "GA.generations_completed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.valid_parameters", "modulename": "fermatrica.optim.pygad", "qualname": "GA.valid_parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.num_generations", "modulename": "fermatrica.optim.pygad", "qualname": "GA.num_generations", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.parent_selection_type", "modulename": "fermatrica.optim.pygad", "qualname": "GA.parent_selection_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.mutation_percent_genes", "modulename": "fermatrica.optim.pygad", "qualname": "GA.mutation_percent_genes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.mutation_num_genes", "modulename": "fermatrica.optim.pygad", "qualname": "GA.mutation_num_genes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.best_solutions_fitness", "modulename": "fermatrica.optim.pygad", "qualname": "GA.best_solutions_fitness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.best_solution_generation", "modulename": "fermatrica.optim.pygad", "qualname": "GA.best_solution_generation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.save_best_solutions", "modulename": "fermatrica.optim.pygad", "qualname": "GA.save_best_solutions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.best_solutions", "modulename": "fermatrica.optim.pygad", "qualname": "GA.best_solutions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.save_solutions", "modulename": "fermatrica.optim.pygad", "qualname": "GA.save_solutions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.solutions", "modulename": "fermatrica.optim.pygad", "qualname": "GA.solutions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.solutions_fitness", "modulename": "fermatrica.optim.pygad", "qualname": "GA.solutions_fitness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.last_generation_fitness", "modulename": "fermatrica.optim.pygad", "qualname": "GA.last_generation_fitness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.last_generation_parents", "modulename": "fermatrica.optim.pygad", "qualname": "GA.last_generation_parents", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.last_generation_offspring_crossover", "modulename": "fermatrica.optim.pygad", "qualname": "GA.last_generation_offspring_crossover", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.last_generation_offspring_mutation", "modulename": "fermatrica.optim.pygad", "qualname": "GA.last_generation_offspring_mutation", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.previous_generation_fitness", "modulename": "fermatrica.optim.pygad", "qualname": "GA.previous_generation_fitness", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.last_generation_elitism", "modulename": "fermatrica.optim.pygad", "qualname": "GA.last_generation_elitism", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "fermatrica.optim.pygad.GA.round_genes", "modulename": "fermatrica.optim.pygad", "qualname": "GA.round_genes", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">solutions</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.initialize_population", "modulename": "fermatrica.optim.pygad", "qualname": "GA.initialize_population", "kind": "function", "doc": "<p>Creates an initial population randomly as a NumPy array. The array is saved in the instance attribute named 'population'.</p>\n\n<p>low: The lower value of the random range from which the gene values in the initial population are selected. It defaults to -4. Available in PyGAD 1.0.20 and higher.\nhigh: The upper value of the random range from which the gene values in the initial population are selected. It defaults to -4. Available in PyGAD 1.0.20.</p>\n\n<p>This method assigns the values of the following 3 instance attributes:\n    1. pop_size: Size of the population.\n    2. population: Initially, holds the initial population and later updated after each generation.\n    3. init_population: Keeping the initial population.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">low</span>,</span><span class=\"param\">\t<span class=\"n\">high</span>,</span><span class=\"param\">\t<span class=\"n\">allow_duplicate_genes</span>,</span><span class=\"param\">\t<span class=\"n\">mutation_by_replacement</span>,</span><span class=\"param\">\t<span class=\"n\">gene_type</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.cal_pop_fitness", "modulename": "fermatrica.optim.pygad", "qualname": "GA.cal_pop_fitness", "kind": "function", "doc": "<p>Calculating the fitness values of all solutions in the current population.\nIt returns:\n    -fitness: An array of the calculated fitness values.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.run", "modulename": "fermatrica.optim.pygad", "qualname": "GA.run", "kind": "function", "doc": "<p>Runs the genetic algorithm. This is the main method in which the genetic algorithm is evolved through a number of generations.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.steady_state_selection", "modulename": "fermatrica.optim.pygad", "qualname": "GA.steady_state_selection", "kind": "function", "doc": "<p>Selects the parents using the steady-state selection technique. Later, these parents will mate to produce the offspring.\nIt accepts 2 parameters:\n    -fitness: The fitness values of the solutions in the current population.\n    -num_parents: The number of parents to be selected.\nIt returns an array of the selected parents.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fitness</span>, </span><span class=\"param\"><span class=\"n\">num_parents</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.rank_selection", "modulename": "fermatrica.optim.pygad", "qualname": "GA.rank_selection", "kind": "function", "doc": "<p>Selects the parents using the rank selection technique. Later, these parents will mate to produce the offspring.\nIt accepts 2 parameters:\n    -fitness: The fitness values of the solutions in the current population.\n    -num_parents: The number of parents to be selected.\nIt returns an array of the selected parents.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fitness</span>, </span><span class=\"param\"><span class=\"n\">num_parents</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.random_selection", "modulename": "fermatrica.optim.pygad", "qualname": "GA.random_selection", "kind": "function", "doc": "<p>Selects the parents randomly. Later, these parents will mate to produce the offspring.\nIt accepts 2 parameters:\n    -fitness: The fitness values of the solutions in the current population.\n    -num_parents: The number of parents to be selected.\nIt returns an array of the selected parents.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fitness</span>, </span><span class=\"param\"><span class=\"n\">num_parents</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.tournament_selection", "modulename": "fermatrica.optim.pygad", "qualname": "GA.tournament_selection", "kind": "function", "doc": "<p>Selects the parents using the tournament selection technique. Later, these parents will mate to produce the offspring.\nIt accepts 2 parameters:\n    -fitness: The fitness values of the solutions in the current population.\n    -num_parents: The number of parents to be selected.\nIt returns an array of the selected parents.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fitness</span>, </span><span class=\"param\"><span class=\"n\">num_parents</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.roulette_wheel_selection", "modulename": "fermatrica.optim.pygad", "qualname": "GA.roulette_wheel_selection", "kind": "function", "doc": "<p>Selects the parents using the roulette wheel selection technique. Later, these parents will mate to produce the offspring.\nIt accepts 2 parameters:\n    -fitness: The fitness values of the solutions in the current population.\n    -num_parents: The number of parents to be selected.\nIt returns an array of the selected parents.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fitness</span>, </span><span class=\"param\"><span class=\"n\">num_parents</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.stochastic_universal_selection", "modulename": "fermatrica.optim.pygad", "qualname": "GA.stochastic_universal_selection", "kind": "function", "doc": "<p>Selects the parents using the stochastic universal selection technique. Later, these parents will mate to produce the offspring.\nIt accepts 2 parameters:\n    -fitness: The fitness values of the solutions in the current population.\n    -num_parents: The number of parents to be selected.\nIt returns an array of the selected parents.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fitness</span>, </span><span class=\"param\"><span class=\"n\">num_parents</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.single_point_crossover", "modulename": "fermatrica.optim.pygad", "qualname": "GA.single_point_crossover", "kind": "function", "doc": "<p>Applies the single-point crossover. It selects a point randomly at which crossover takes place between the pairs of parents.\nIt accepts 2 parameters:\n    -parents: The parents to mate for producing the offspring.\n    -offspring_size: The size of the offspring to produce.\nIt returns an array the produced offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parents</span>, </span><span class=\"param\"><span class=\"n\">offspring_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.two_points_crossover", "modulename": "fermatrica.optim.pygad", "qualname": "GA.two_points_crossover", "kind": "function", "doc": "<p>Applies the 2 points crossover. It selects the 2 points randomly at which crossover takes place between the pairs of parents.\nIt accepts 2 parameters:\n    -parents: The parents to mate for producing the offspring.\n    -offspring_size: The size of the offspring to produce.\nIt returns an array the produced offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parents</span>, </span><span class=\"param\"><span class=\"n\">offspring_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.uniform_crossover", "modulename": "fermatrica.optim.pygad", "qualname": "GA.uniform_crossover", "kind": "function", "doc": "<p>Applies the uniform crossover. For each gene, a parent out of the 2 mating parents is selected randomly and the gene is copied from it.\nIt accepts 2 parameters:\n    -parents: The parents to mate for producing the offspring.\n    -offspring_size: The size of the offspring to produce.\nIt returns an array the produced offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parents</span>, </span><span class=\"param\"><span class=\"n\">offspring_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.scattered_crossover", "modulename": "fermatrica.optim.pygad", "qualname": "GA.scattered_crossover", "kind": "function", "doc": "<p>Applies the scattered crossover. It randomly selects the gene from one of the 2 parents.\nIt accepts 2 parameters:\n    -parents: The parents to mate for producing the offspring.\n    -offspring_size: The size of the offspring to produce.\nIt returns an array the produced offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">parents</span>, </span><span class=\"param\"><span class=\"n\">offspring_size</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.random_mutation", "modulename": "fermatrica.optim.pygad", "qualname": "GA.random_mutation", "kind": "function", "doc": "<p>Applies the random mutation which changes the values of a number of genes randomly.\nThe random value is selected either using the 'gene_space' parameter or the 2 parameters 'random_mutation_min_val' and 'random_mutation_max_val'.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.mutation_by_space", "modulename": "fermatrica.optim.pygad", "qualname": "GA.mutation_by_space", "kind": "function", "doc": "<p>Applies the random mutation using the mutation values' space.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring using the mutation space.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.mutation_probs_by_space", "modulename": "fermatrica.optim.pygad", "qualname": "GA.mutation_probs_by_space", "kind": "function", "doc": "<p>Applies the random mutation using the mutation values' space and the mutation probability. For each gene, if its probability is &lt;= that mutation probability, then it will be mutated based on the mutation space.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring using the mutation space.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.mutation_randomly", "modulename": "fermatrica.optim.pygad", "qualname": "GA.mutation_randomly", "kind": "function", "doc": "<p>Applies the random mutation the mutation probability. For each gene, if its probability is &lt;= that mutation probability, then it will be mutated randomly.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.mutation_probs_randomly", "modulename": "fermatrica.optim.pygad", "qualname": "GA.mutation_probs_randomly", "kind": "function", "doc": "<p>Applies the random mutation using the mutation probability. For each gene, if its probability is &lt;= that mutation probability, then it will be mutated randomly.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.swap_mutation", "modulename": "fermatrica.optim.pygad", "qualname": "GA.swap_mutation", "kind": "function", "doc": "<p>Applies the swap mutation which interchanges the values of 2 randomly selected genes.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.inversion_mutation", "modulename": "fermatrica.optim.pygad", "qualname": "GA.inversion_mutation", "kind": "function", "doc": "<p>Applies the inversion mutation which selects a subset of genes and inverts them (in order).\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.scramble_mutation", "modulename": "fermatrica.optim.pygad", "qualname": "GA.scramble_mutation", "kind": "function", "doc": "<p>Applies the scramble mutation which selects a subset of genes and shuffles their order randomly.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.adaptive_mutation_population_fitness", "modulename": "fermatrica.optim.pygad", "qualname": "GA.adaptive_mutation_population_fitness", "kind": "function", "doc": "<p>A helper method to calculate the average fitness of the solutions before applying the adaptive mutation.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns the average fitness to be used in adaptive mutation.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.adaptive_mutation", "modulename": "fermatrica.optim.pygad", "qualname": "GA.adaptive_mutation", "kind": "function", "doc": "<p>Applies the adaptive mutation which changes the values of a number of genes randomly. In adaptive mutation, the number of genes to mutate differs based on the fitness value of the solution.\nThe random value is selected either using the 'gene_space' parameter or the 2 parameters 'random_mutation_min_val' and 'random_mutation_max_val'.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.adaptive_mutation_by_space", "modulename": "fermatrica.optim.pygad", "qualname": "GA.adaptive_mutation_by_space", "kind": "function", "doc": "<p>Applies the adaptive mutation based on the 2 parameters 'mutation_num_genes' and 'gene_space'.\nA number of genes equal are selected randomly for mutation. This number depends on the fitness of the solution.\nThe random values are selected from the 'gene_space' parameter.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.adaptive_mutation_randomly", "modulename": "fermatrica.optim.pygad", "qualname": "GA.adaptive_mutation_randomly", "kind": "function", "doc": "<p>Applies the adaptive mutation based on the 'mutation_num_genes' parameter.\nA number of genes equal are selected randomly for mutation. This number depends on the fitness of the solution.\nThe random values are selected based on the 2 parameters 'random_mutation_min_val' and 'random_mutation_max_val'.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.adaptive_mutation_probs_by_space", "modulename": "fermatrica.optim.pygad", "qualname": "GA.adaptive_mutation_probs_by_space", "kind": "function", "doc": "<p>Applies the adaptive mutation based on the 2 parameters 'mutation_probability' and 'gene_space'.\nBased on whether the solution fitness is above or below a threshold, the mutation is applied diffrently by mutating high or low number of genes.\nThe random values are selected based on space of values for each gene.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.adaptive_mutation_probs_randomly", "modulename": "fermatrica.optim.pygad", "qualname": "GA.adaptive_mutation_probs_randomly", "kind": "function", "doc": "<p>Applies the adaptive mutation based on the 'mutation_probability' parameter.\nBased on whether the solution fitness is above or below a threshold, the mutation is applied diffrently by mutating high or low number of genes.\nThe random values are selected based on the 2 parameters 'random_mutation_min_val' and 'random_mutation_max_val'.\nIt accepts a single parameter:\n    -offspring: The offspring to mutate.\nIt returns an array of the mutated offspring.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">offspring</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.solve_duplicate_genes_randomly", "modulename": "fermatrica.optim.pygad", "qualname": "GA.solve_duplicate_genes_randomly", "kind": "function", "doc": "<p>Solves the duplicates in a solution by randomly selecting new values for the duplicating genes.</p>\n\n<p>solution: A solution with duplicate values.\nmin_val: Minimum value of the range to sample a number randomly.\nmax_val: Maximum value of the range to sample a number randomly.\nmutation_by_replacement: Identical to the self.mutation_by_replacement attribute.\ngene_type: Exactly the same as the self.gene_type attribute.\nnum_trials: Maximum number of trials to change the gene value to solve the duplicates.</p>\n\n<p>Returns:\n    new_solution: Solution after trying to solve its duplicates. If no duplicates solved, then it is identical to the passed solution parameter.\n    not_unique_indices: Indices of the genes with duplicate values.\n    num_unsolved_duplicates: Number of unsolved duplicates.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">solution</span>,</span><span class=\"param\">\t<span class=\"n\">min_val</span>,</span><span class=\"param\">\t<span class=\"n\">max_val</span>,</span><span class=\"param\">\t<span class=\"n\">mutation_by_replacement</span>,</span><span class=\"param\">\t<span class=\"n\">gene_type</span>,</span><span class=\"param\">\t<span class=\"n\">num_trials</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.solve_duplicate_genes_by_space", "modulename": "fermatrica.optim.pygad", "qualname": "GA.solve_duplicate_genes_by_space", "kind": "function", "doc": "<p>Solves the duplicates in a solution by selecting values for the duplicating genes from the gene space.</p>\n\n<p>solution: A solution with duplicate values.\ngene_type: Exactly the same as the self.gene_type attribute.\nnum_trials: Maximum number of trials to change the gene value to solve the duplicates.</p>\n\n<p>Returns:\n    new_solution: Solution after trying to solve its duplicates. If no duplicates solved, then it is identical to the passed solution parameter.\n    not_unique_indices: Indices of the genes with duplicate values.\n    num_unsolved_duplicates: Number of unsolved duplicates.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">solution</span>, </span><span class=\"param\"><span class=\"n\">gene_type</span>, </span><span class=\"param\"><span class=\"n\">num_trials</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">build_initial_pop</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.solve_duplicate_genes_by_space_OLD", "modulename": "fermatrica.optim.pygad", "qualname": "GA.solve_duplicate_genes_by_space_OLD", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">solution</span>, </span><span class=\"param\"><span class=\"n\">gene_type</span>, </span><span class=\"param\"><span class=\"n\">num_trials</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.unique_int_gene_from_range", "modulename": "fermatrica.optim.pygad", "qualname": "GA.unique_int_gene_from_range", "kind": "function", "doc": "<p>Finds a unique integer value for the gene.</p>\n\n<p>solution: A solution with duplicate values.\ngene_index: Index of the gene to find a unique value.\nmin_val: Minimum value of the range to sample a number randomly.\nmax_val: Maximum value of the range to sample a number randomly.\nmutation_by_replacement: Identical to the self.mutation_by_replacement attribute.\ngene_type: Exactly the same as the self.gene_type attribute.</p>\n\n<p>Returns:\n    selected_value: The new value of the gene. It may be identical to the original gene value in case there are no possible unique values for the gene.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">solution</span>,</span><span class=\"param\">\t<span class=\"n\">gene_index</span>,</span><span class=\"param\">\t<span class=\"n\">min_val</span>,</span><span class=\"param\">\t<span class=\"n\">max_val</span>,</span><span class=\"param\">\t<span class=\"n\">mutation_by_replacement</span>,</span><span class=\"param\">\t<span class=\"n\">gene_type</span>,</span><span class=\"param\">\t<span class=\"n\">step</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.unique_genes_by_space", "modulename": "fermatrica.optim.pygad", "qualname": "GA.unique_genes_by_space", "kind": "function", "doc": "<p>Loops through all the duplicating genes to find unique values that from their gene spaces to solve the duplicates.\nFor each duplicating gene, a call to the unique_gene_by_space() is made.</p>\n\n<p>new_solution: A solution with duplicate values.\ngene_type: Exactly the same as the self.gene_type attribute.\nnot_unique_indices: Indices with duplicating values.\nnum_trials: Maximum number of trials to change the gene value to solve the duplicates.</p>\n\n<p>Returns:\n    new_solution: Solution after trying to solve all of its duplicates. If no duplicates solved, then it is identical to the passed solution parameter.\n    not_unique_indices: Indices of the genes with duplicate values.\n    num_unsolved_duplicates: Number of unsolved duplicates.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">new_solution</span>,</span><span class=\"param\">\t<span class=\"n\">gene_type</span>,</span><span class=\"param\">\t<span class=\"n\">not_unique_indices</span>,</span><span class=\"param\">\t<span class=\"n\">num_trials</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">build_initial_pop</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.unique_gene_by_space", "modulename": "fermatrica.optim.pygad", "qualname": "GA.unique_gene_by_space", "kind": "function", "doc": "<p>Returns a unique gene value for a single gene based on its value space to solve the duplicates.</p>\n\n<p>solution: A solution with duplicate values.\ngene_idx: The index of the gene that duplicates its value with another gene.\ngene_type: Exactly the same as the self.gene_type attribute.</p>\n\n<p>Returns:\n    A unique value, if exists, for the gene.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">solution</span>, </span><span class=\"param\"><span class=\"n\">gene_idx</span>, </span><span class=\"param\"><span class=\"n\">gene_type</span>, </span><span class=\"param\"><span class=\"n\">build_initial_pop</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.best_solution", "modulename": "fermatrica.optim.pygad", "qualname": "GA.best_solution", "kind": "function", "doc": "<p>Returns information about the best solution found by the genetic algorithm.\nAccepts the following parameters:\n    pop_fitness: An optional parameter holding the fitness values of the solutions in the current population. If None, then the cal_pop_fitness() method is called to calculate the fitness of the population.\nThe following are returned:\n    -best_solution: Best solution in the current population.\n    -best_solution_fitness: Fitness value of the best solution.\n    -best_match_idx: Index of the best solution in the current population.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pop_fitness</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.plot_result", "modulename": "fermatrica.optim.pygad", "qualname": "GA.plot_result", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;PyGAD - Generation vs. Fitness&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;Generation&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;Fitness&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">14</span>,</span><span class=\"param\">\t<span class=\"n\">plot_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;plot&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;#3870FF&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.plot_fitness", "modulename": "fermatrica.optim.pygad", "qualname": "GA.plot_fitness", "kind": "function", "doc": "<p>Creates, shows, and returns a figure that summarizes how the fitness value evolved by generation. Can only be called after completing at least 1 generation. If no generation is completed, an exception is raised.</p>\n\n<p>Accepts the following:\n    title: Figure title.\n    xlabel: Label on the X-axis.\n    ylabel: Label on the Y-axis.\n    linewidth: Line width of the plot. Defaults to 3.\n    font_size: Font size for the labels and title. Defaults to 14.\n    plot_type: Type of the plot which can be either \"plot\" (default), \"scatter\", or \"bar\".\n    color: Color of the plot which defaults to \"#3870FF\".\n    save_dir: Directory to save the figure.</p>\n\n<p>Returns the figure.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;PyGAD - Generation vs. Fitness&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;Generation&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;Fitness&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">14</span>,</span><span class=\"param\">\t<span class=\"n\">plot_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;plot&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;#3870FF&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.plot_new_solution_rate", "modulename": "fermatrica.optim.pygad", "qualname": "GA.plot_new_solution_rate", "kind": "function", "doc": "<p>Creates, shows, and returns a figure that summarizes the rate of exploring new solutions. This method works only when save_solutions=True in the constructor of the pygad.GA class.</p>\n\n<p>Accepts the following:\n    title: Figure title.\n    xlabel: Label on the X-axis.\n    ylabel: Label on the Y-axis.\n    linewidth: Line width of the plot. Defaults to 3.\n    font_size: Font size for the labels and title. Defaults to 14.\n    plot_type: Type of the plot which can be either \"plot\" (default), \"scatter\", or \"bar\".\n    color: Color of the plot which defaults to \"#3870FF\".\n    save_dir: Directory to save the figure.</p>\n\n<p>Returns the figure.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;PyGAD - Generation vs. New Solution Rate&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;Generation&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;New Solution Rate&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">14</span>,</span><span class=\"param\">\t<span class=\"n\">plot_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;plot&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;#3870FF&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.plot_genes", "modulename": "fermatrica.optim.pygad", "qualname": "GA.plot_genes", "kind": "function", "doc": "<p>Creates, shows, and returns a figure with number of subplots equal to the number of genes. Each subplot shows the gene value for each generation.\nThis method works only when save_solutions=True in the constructor of the pygad.GA class.\nIt also works only after completing at least 1 generation. If no generation is completed, an exception is raised.</p>\n\n<p>Accepts the following:\n    title: Figure title.\n    xlabel: Label on the X-axis.\n    ylabel: Label on the Y-axis.\n    linewidth: Line width of the plot. Defaults to 3.\n    font_size: Font size for the labels and title. Defaults to 14.\n    plot_type: Type of the plot which can be either \"plot\" (default), \"scatter\", or \"bar\".\n    graph_type: Type of the graph which can be either \"plot\" (default), \"boxplot\", or \"histogram\".\n    fill_color: Fill color of the graph which defaults to \"#3870FF\". This has no effect if graph_type=\"plot\".\n    color: Color of the plot which defaults to \"black\".\n    solutions: Defaults to \"all\" which means use all solutions. If \"best\" then only the best solutions are used.\n    save_dir: Directory to save the figure.</p>\n\n<p>Returns the figure.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">&#39;PyGAD - Gene&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;Gene&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"s1\">&#39;Value&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">font_size</span><span class=\"o\">=</span><span class=\"mi\">14</span>,</span><span class=\"param\">\t<span class=\"n\">plot_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;plot&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">graph_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;plot&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fill_color</span><span class=\"o\">=</span><span class=\"s1\">&#39;#3870FF&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">&#39;black&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">solutions</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">save_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.close_parallel", "modulename": "fermatrica.optim.pygad", "qualname": "GA.close_parallel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.GA.save", "modulename": "fermatrica.optim.pygad", "qualname": "GA.save", "kind": "function", "doc": "<p>Saves the genetic algorithm instance:\n    -filename: Name of the file to save the instance. No extension is needed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "fermatrica.optim.pygad.load", "modulename": "fermatrica.optim.pygad", "qualname": "load", "kind": "function", "doc": "<p>Reads a saved instance of the genetic algorithm:\n    -filename: Name of the file to read the instance. No extension is needed.\nReturns the genetic algorithm instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();